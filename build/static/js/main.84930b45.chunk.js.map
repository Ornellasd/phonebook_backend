{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","ContactInput","submit","name","phone","nameChange","phoneChange","onSubmit","value","onChange","type","FilterInput","text","change","Contact","contact","deletePhonebookEntry","onClick","Alert","message","className","App","useState","persons","setPersons","newName","setNewName","newPhone","setNewPhone","filter","setFilter","alertMessage","setAlertMessage","alertType","setAlertType","useEffect","personService","initialEntries","handleUpdateContact","entry","changedEntry","window","confirm","returnedEntry","map","person","catch","error","setTimeout","contactsToShow","toLowerCase","includes","event","target","preventDefault","contactObject","length","find","concat","p","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84930b45.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteItem = id => axios.delete(`${baseUrl}/${id}`)\n\nexport default { getAll, create, update, deleteItem }","import React, { useEffect, useState } from 'react'\nimport personService from './services/persons'\n\nconst ContactInput = ({ submit, name, phone, nameChange, phoneChange }) => {\n  return (\n    <form onSubmit={submit}>\n      <div>\n        name: <input value={name} onChange={nameChange} />\n      </div>\n      <div>\n        number: <input value={phone} onChange={phoneChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst FilterInput = ({ text, change }) => <div>{text} <input onChange={change} /></div> \n\nconst Contact = ({ contact, deletePhonebookEntry }) => {\n  return (\n    <div>\n      <p>{contact.name} {contact.phone}</p>\n      <button onClick={deletePhonebookEntry}>Delete</button>\n    </div>\n  )\n}\n\nconst Alert = ({ message, type }) => {\n  if(message === null) {\n    return null\n  }\n\n  if(type === 'success') {\n    return <div className='alert success'>{message}</div>\n  } else {\n    return <div className='alert error'>{message}</div>\n  }\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newPhone, setNewPhone ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ alertMessage, setAlertMessage ] = useState(null)\n  const [ alertType, setAlertType ] = useState(['success', 'error'])\n   \n  const fetchNotes = () => {\n    personService\n      .getAll()\n        .then(initialEntries => {\n          setPersons(initialEntries)\n        })\n  }\n\n  const deletePhonebookEntry = (id) => {\n    const entry = persons.find(p => p.id === id)\n\n    if(window.confirm(`Delete ${entry.name}?`)) {\n      personService\n        .deleteItem(id)\n        .then(() => {\n          setPersons(persons.filter(p => p.id !== id))\n        })\n    }\n  }\n\n  useEffect(fetchNotes, []) \n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handlePhoneChange = (event) => {\n    setNewPhone(event.target.value)\n  }\n\n  const handleContactFilter = (event) => {\n    setFilter(event.target.value.toLowerCase())\n  }\n\n  const addContact = (event) => {\n    event.preventDefault()\n\n    const contactObject = {\n      name: newName,\n      phone: newPhone,\n      id: persons.length + 1\n    }\n\n    if(persons.filter(person => person.name === newName).length > 0) { \n      const entry = persons.find(person => person.name === newName)\n      handleUpdateContact(entry)\n    } else {\n      personService\n        .create(contactObject)\n        .then(returnedEntry => {\n          setPersons(persons.concat(returnedEntry))\n          setNewName('')\n          setNewPhone('')\n          setAlertType('success')\n          setAlertMessage(\n            `Added ${contactObject.name}`\n          )\n          setTimeout(() => {\n            setAlertMessage(null)\n          }, 5000)\n        })\n    }    \n  }\n\n  const handleUpdateContact = (entry) => {\n    const changedEntry = { ...entry, phone: newPhone }\n\n    if(window.confirm(`${entry.name} has already been added to the phonebook, replace the old number with a new one?`)) {\n      personService\n        .update(entry.id, changedEntry)\n        .then(returnedEntry => {\n          setPersons(persons.map(person => person.id !== entry.id ? person : returnedEntry ))\n          setNewName('')\n          setNewPhone('')\n        })\n        .catch(error => {\n          setAlertType('error')\n          setAlertMessage(`Information of ${newName} has already been removed from the server`)\n        })\n        setTimeout(() => {\n          setAlertMessage(null)\n        }, 5000)\n    } \n  }\n  \n  const contactsToShow = persons.filter(person => person.name.toLowerCase().includes(filter))\n  \n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Alert message={alertMessage} type={alertType} />\n      <FilterInput text=\"filter shown with\" change={handleContactFilter} />\n      <h2>add a new</h2>\n      <ContactInput submit={addContact} name={newName} phone={newPhone} nameChange={handleNameChange} phoneChange={handlePhoneChange} />\n      <h2>Numbers</h2>      \n      {contactsToShow.map(contact => \n        <Contact\n          key={contact.id}\n          contact={contact}\n          deletePhonebookEntry={() => deletePhonebookEntry(contact.id)}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}