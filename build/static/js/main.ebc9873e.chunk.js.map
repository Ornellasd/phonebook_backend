{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","ContactInput","submit","name","phone","nameChange","phoneChange","onSubmit","value","onChange","type","FilterInput","text","change","Contact","contact","deletePhonebookEntry","onClick","Alert","message","className","App","useState","persons","setPersons","newName","setNewName","newPhone","setNewPhone","filter","setFilter","alertMessages","setAlertMessages","alertType","setAlertType","useEffect","personService","initialEntries","handleAlerts","messages","setTimeout","handlePhonebookEntries","handleUpdateContact","entry","changedEntry","window","confirm","returnedEntry","map","person","catch","error","Object","values","contactsToShow","toLowerCase","includes","alert","event","target","preventDefault","contactObject","number","length","find","concat","p","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebc9873e.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteItem = id => axios.delete(`${baseUrl}/${id}`)\n\nexport default { getAll, create, update, deleteItem }","import React, { useEffect, useState } from 'react'\nimport personService from './services/persons'\n\nconst ContactInput = ({ submit, name, phone, nameChange, phoneChange }) => {\n  return (\n    <form onSubmit={submit}>\n      <div>\n        name: <input value={name} onChange={nameChange} />\n      </div>\n      <div>\n        number: <input value={phone} onChange={phoneChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst FilterInput = ({ text, change }) => <div>{text} <input onChange={change} /></div> \n\nconst Contact = ({ contact, deletePhonebookEntry }) => {\n  return (\n    <div>\n      <p>{contact.name} {contact.phone}</p>\n      <button onClick={deletePhonebookEntry}>Delete</button>\n    </div>\n  )\n}\n\nconst Alert = ({ message, type }) => <div className={\"alert \" + (type === 'success' ? 'success' : 'error')} >{message}</div>\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newPhone, setNewPhone ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ alertMessages, setAlertMessages ] = useState([])\n  const [ alertType, setAlertType ] = useState('')\n   \n  const fetchNotes = () => {\n    personService\n      .getAll()\n        .then(initialEntries => {\n          setPersons(initialEntries)\n        })\n  }\n\n  const deletePhonebookEntry = (id) => {\n    const entry = persons.find(p => p.id === id)\n\n    if(window.confirm(`Delete ${entry.name}?`)) {\n      personService\n        .deleteItem(id)\n        .then(() => {\n          setPersons(persons.filter(p => p.id !== id))\n        })\n    }\n  }\n\n  useEffect(fetchNotes, []) \n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handlePhoneChange = (event) => {\n    setNewPhone(event.target.value)\n  }\n\n  const handleContactFilter = (event) => {\n    setFilter(event.target.value.toLowerCase())\n  }\n\n  const handleAlerts = (type, messages) => {\n    setAlertType(type)\n    setAlertMessages(messages)\n    setTimeout(() => {\n      setAlertMessages([])\n    }, 5000)    \n  }\n\n  const handlePhonebookEntries = persons => {\n    setPersons(persons)\n    setNewName('')\n    setNewPhone('')\n  }\n\n  const addContact = (event) => {\n    event.preventDefault()\n\n    const contactObject = {\n      name: newName,\n      number: newPhone,\n      id: persons.length + 1\n    }\n\n    if(persons.filter(person => person.name === newName).length > 0) { \n      const entry = persons.find(person => person.name === newName)\n      handleUpdateContact(entry)\n    } else {\n      personService\n        .create(contactObject)\n        .then(returnedEntry => {\n          handlePhonebookEntries(persons.concat(returnedEntry))\n          handleAlerts('success', [`Added ${contactObject.name}`])\n        })\n        .catch(error => {\n          handleAlerts('error', Object.values(error.response.data))\n        })\n    }    \n  }\n\n  const handleUpdateContact = (entry) => {\n    const changedEntry = { ...entry, phone: newPhone }\n\n    if(window.confirm(`${entry.name} has already been added to the phonebook, replace the old number with a new one?`)) {\n      personService\n        .update(entry.id, changedEntry)\n        .then(returnedEntry => {\n          // not sure why this doesn't get caught in .catch statement\n          if(returnedEntry === null) {\n            handleAlerts('error', [`Information of ${newName} has already been removed from the server`])\n          /////////////////\n          } else {\n            handlePhonebookEntries(persons.map(person => person.id !== entry.id ? person : returnedEntry))\n          }\n        })\n        .catch(error => {\n          handleAlerts('error', Object.values(error.response.data))\n        })\n    } \n  }\n  \n  const contactsToShow = persons.filter(person => person.name.toLowerCase().includes(filter))\n  \n  return (\n    <div>\n      <h2>Phonebook</h2>\n      {alertMessages.map(alert => \n        <Alert message={alert} type={alertType} />\n      )}\n      <FilterInput text=\"filter shown with\" change={handleContactFilter} />\n      <h2>add a new</h2>\n      <ContactInput submit={addContact} name={newName} phone={newPhone} nameChange={handleNameChange} phoneChange={handlePhoneChange} />\n      <h2>Numbers</h2>      \n      {contactsToShow.map(contact => \n        <Contact\n          key={contact.id}\n          contact={contact}\n          deletePhonebookEntry={() => deletePhonebookEntry(contact.id)}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}